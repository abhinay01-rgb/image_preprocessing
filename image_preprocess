
import cv2
from matplotlib import pyplot as plt

image_file="/content/4.jpg"
img=cv2.imread(image_file)

cv2.imshow("original image",img)
cv2.waitKey(0)

def display(im_path):
  dpi=80
  im_data=plt.imread(im_path)
  height,width,depth=im_data.shape
  figsize=width/float(dpi),height/float(dpi)
  fig=plt.figure(figsize=figsize)
  ax=plt.figure(figsize=figsize)
  ax=fig.add.axes([0,0,1,1])
  ax.axis('off')
  ax.show(im_data,cmap='gray')
  plt.show()

display(image_file)

inverted_image=cv2.bitwise_not(img)
cv2.imwrite("temp/inverted.jpg",inverted_image)

display("temp/inverted.jpg")

def grayscale(image):
  return cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)

gray_image=grayscale(img)
cv2.imwrite("temp/gray.jpg",gray_image)

display("temp/gray.jpg")

thresh,im_bw=cv2.threshold(gray_image,210,300,cv2.THRESH_BINARY)
cv2.imwrite("temp/bw_image.jpg",im_bw)

display("temp/bw_image.jpg")

def noise_removal(image):
  import numpy as np
  kernal=np.ones((1,1),np.uint8)
  image=cv2.dilate(image,kernal,iteration=1)
  kernal=np.ones((1,1),np.uint8)
  image=cv2.erode(image,kernel,iterations=1)
  image=cv2.morphologyEx(image,cv2.MORPH_CLOSE,kernel)
  image=cv2.medianBlur(image,3)
  return(image)

no_noise=noise_removal(im_bw)
cv2.imwrite("temp/no_noise.jpg",no_noise)

display("temp/no_noise.jpg")

def thin_front(image):
  import numpy as np
  image=cv2.bitwise_not(image)
  kernel=np.ones((2,2),np.unit8)
  image=cv2.erode(image,kernel,iterations=2)
  image=cv2.bitwise_not(image)
  return(image)

eroded_image=thin_font(no_noise)
cv2.imwrite("temp/erode_image.jpg",eroded_image)

display("temp/eroded_image.jpg")

def thick_front(image):
  import numpy as np
  image=cv2.bitwise_not(image)
  kernel=np.ones((2,2),np.unit8)
  image=cv2.dilate(image,kernel,iterations=2)
  image=cv2.bitwise_not(image)
  return(image)

dilated_image=thick_font(no_noise)
cv2.imwrite("temp/dilated_image.jpg",dilated_image)

display("temp/dilated_image")

new=cv2.imread("data/page_01_rotated.jpg")

import numpy as np
def getSkewAngle(cvImage) -> float:
# Prep image, copy, convert to gray scale, blur, and threshold
  newImage = cvImage.copy()
  gray = cv2.cvtColor(newImage, cv2.COLOR_BGR2GRAY)
  blur = cv2.GaussianBlur(gray, (9,9), 0)
  thresh = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1]

  kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (30, 5))
  dilate = cv2.dilate(thresh, kernel, iterations=2)
# Find all contours
  contours, hierarchy = cv2.findContours (dilate, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)
  contours = sorted(contours, key = cv2.contourArea, reverse = True)
  for c in contours:
    rect = cv2.boundingRect(c)
    x,y,w,h = rect
    cv2.rectangle(newImage, (x,y), (x+w,y+h), (0,255,0),2)
# Find Largest contour and surround in min area box
  largestContour = contours[0]
  print (len(contours))
  minAreaRect = cv2.minAreaRect(largestContour)
  cv2.imwrite("temp/boxes.jpg", newImage)
# Determine the angle. Convert it to the value that was originally used to obtain skewed image
  angle = minAreaRect[-1]
  if angle < -45:
    angle = 90 + angle
  return -1.0 * angle
# Rotate the image around its center
def rotateImage(cvImage, angle: float):
  newImage = cvImage.copy()
  (h, w) = newImage.shape[:2]
  center (w // 2, h // 2)
  M = cv2.getRotationMatrix2D(center, angle, 1.0)
  newImage = cv2.warpAffine(newImage, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
  return newImage

def deskew(cvImage):
  angle=getSkewAngle(cvImage)
  return rotateImage(cvImage,-1.0*angle)

fixed=deskew(new)
cv2.imwrite("temp/rotated_fixed.jpg",fixed)

display("temp/rotated_fixed.jpg")

display("temp/no_noise.jpg")

def remove_borders(image):
  contours,heirachy=cv2.findCountours(image,cv2.RETER_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
  cntsSorted=sorted(contours,key=lambda x:cv2.contoursArea(x))
  cnt=cntsSorted[-1]
  x,y,w,h=cv2.boundingReact(cnt)
  crop=image[y:y+h,x:x+w]
  return (crop)

no_borders=remove_borders(no_noise)
cv2.imwrite("temp/no_borders.jpg",no_borders)
display('temp/no_borders.jpg')

color=[255,255,255]
top,bottom,left,right=[150]*4

image_with_border=cv2.copyMakeBorder(no_border,top,bottom,left,right,cv2.BORDER_CONSTAN,value=color)
cv2.imwrite("temp/image_with_border.jpg",image_with_border)
display("temp/image_with_border.jpg")

import pytesseract
from PIL import Image

img_file="data/page_01.jpg"
no_noise="temp/no_noise.jpg"
img=Image.open(img_file)
ocr_result=pytesseract.image_to_string(img)
print(ocr_result)
